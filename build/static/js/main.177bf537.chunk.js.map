{"version":3,"sources":["services/hardware.js","services/geo.js","Check.js","Observation.js","App.js","serviceWorker.js","index.js"],"names":["getLanguage","navigator","languages","length","userLanguage","language","browserLanguage","getTimezoneOffsetVsUTC","Date","getTimezoneOffset","getTimezone","Intl","DateTimeFormat","resolvedOptions","timeZone","err","geoHandler","geoHandlerOne","options","enableHighAccuracy","timeout","maximumAge","data","position","error","isGeoAvailable","successHandler","pos","console","log","crd","coords","concat","latitude","longitude","accuracy","errorHandler","reason","code","message","warn","successWatchHandler","getResult","timezone","result","testLanguage","tests","String","toLowerCase","offset","v","parseInt","testTimeOffsetVsUTC","Check","_ref","title","className","passed","react_default","a","createElement","Observation","value","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","prevWatchPositions","prevOnePositions","handleWatchChanges","bind","assertThisInitialized","handleWatchClick","handleOneClick","handleOneChanges","downloadWatchCSV","downloadOneCSV","newEntry","timestamp","key","setState","toConsumableArray","_ref2","handler","id","geolocation","watchPosition","getCurrentPosition","window","addEventListener","doOnOrientationChange","innerHeight","innerWidth","_this2","JSON","stringify","onClick","map","index","altitude","altitudeAccuracy","heading","speed","href","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.177bf537.chunk.js","sourcesContent":["export function getBrowserData() {\n    navigator.sayswho= (function(){\n        var ua= navigator.userAgent, tem,\n            M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n        if(/trident/i.test(M[1])){\n            tem=  /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n            return 'IE '+(tem[1] || '');\n        }\n        if(M[1]=== 'Chrome'){\n            tem= ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\n            if(tem!= null) return tem.slice(1).join(' ').replace('OPR', 'Opera');\n        }\n        M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];\n        if((tem= ua.match(/version\\/(\\d+)/i))!= null) M.splice(1, 1, tem[1]);\n        return M.join(' ');\n    })();\n    \n    return navigator.sayswho;\n}\n\nexport function getVideoCardInfo() {\n    const gl = document.createElement('canvas').getContext('webgl');\n    if (!gl) {\n        return {\n            error: \"no webgl\",\n        };\n    }\n    const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');\n    return debugInfo ? {\n        vendor: gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL),\n        renderer:  gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL),\n    } : {\n        error: \"no WEBGL_debug_renderer_info\",\n    };\n}\n\nexport function getLanguage() {\n    return (navigator.languages && navigator.languages.length) ? navigator.languages[0] : navigator.userLanguage || navigator.language || navigator.browserLanguage || 'en';\n}\n\nexport function getTimezoneOffsetVsUTC() {\n    return (new Date().getTimezoneOffset())/60 ;\n}\nexport function getTimezone() {\n    try{\n        return Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } catch(err){\n        return \"\";\n    }\n\n}\n\nexport function isMobile() {\n    if (window.matchMedia(\"(orientation: portrait)\").matches) {\n        return window.matchMedia(\"only screen and (max-width: 760px)\").matches;\n    }\n}\n\nexport function devToolsOpen() {\n    // const minimalUserResponseInMiliseconds = 100;\n    // const before = new Date().getTime();\n    // debugger;\n    // const after = new Date().getTime();\n    // // user had to resume the script manually via opened dev tools\n    // return (after - before > minimalUserResponseInMiliseconds) ? \"on\" : \"off\";\n    \n    // var devtools = /./;\n    // devtools.toString = function() {\n    //     this.opened = true;\n    // }\n    //\n    // console.log('%c', devtools);\n}","import {getLanguage, getTimezone, getTimezoneOffsetVsUTC} from \"./hardware\";\n\nconst options = {\n    enableHighAccuracy: true,\n    timeout: 10000,\n    maximumAge: 0\n};\n\nlet geoHandler;\nlet geoHandlerOne;\nlet data = {\n    position: \"\",\n    error: \"\"\n};\n\nexport function isGeoAvailable() {\n    return \"geolocation\" in navigator;\n}\n\nexport function geCurrentPosition(handler) {\n    if (isGeoAvailable()) {\n        geoHandlerOne = handler;\n        navigator.geolocation.getCurrentPosition(successHandler, errorHandler, options);\n    }\n}\n\nfunction successHandler(pos) {\n    console.log(\"g1\");\n    var crd = pos.coords;\n\n    data.position = pos;\n    console.log(pos);\n    geoHandlerOne && geoHandlerOne({position: pos});\n\n    console.log('Your current position is:');\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n}\n\nfunction errorHandler(err) {\n    // error.code can be:\n    //   0: unknown error\n    //   1: permission denied\n    //   2: position unavailable (error response from location provider)\n    //   3: timed out\n    let reason = \"unknown error\";\n    if (err.code === 1) {\n        reason = \"permission denied\";\n    } else if (err.code === 2) {\n        reason = \"position unavailable (error response from location provider)\";\n    } else if (err.code === 3) {\n        reason = \"timed out\";\n    }\n    \n    data.error = `ERROR(${err.code}): reason: ${reason}, ${err.message}`;\n    \n    geoHandler && geoHandler({error: data.error});\n    geoHandlerOne && geoHandlerOne({error: data.error});\n    console.warn(data.error);\n}\n\n\nexport function watchPosition(handler) {\n    let id;\n    if (isGeoAvailable()) {\n        \n        geoHandler = handler;\n        id = navigator.geolocation.watchPosition(successWatchHandler, errorHandler, options);\n    }\n    return id;\n}\n\nfunction successWatchHandler(pos) {\n    var crd = pos.coords;\n    \n    data.position = pos;\n    console.log(pos);\n    geoHandler && geoHandler({position: pos});\n    \n    console.log('Watch: Your current position is:', new Date());\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n}\n\n\nexport function getResult() {\n    let result = 0;\n    let tests = 0;\n    result += testLanguage(getLanguage());\n    tests++;\n    result += testIANATimezone(getTimezone());\n    tests++;\n    result += testTimeOffsetVsUTC(getTimezoneOffsetVsUTC());\n    tests++;\n\n    return parseInt(result/tests, 10);\n}\n\nexport function getResultSub50() {\n    return 20;\n}\n\n\nexport function getResultOver70() {\n    return 71;\n}\n\nexport function testIANATimezone(timezone) {\n    return String(timezone).toLowerCase() === \"america/toronto\" ? 100 : 0;\n}\nexport function testLanguage(language) {\n    //\n    if(language === \"en-CA\" || language === \"fr-CA\" || language === \"en\") {\n        return 100;\n    }\n    return 0;\n}\nexport function testTimeOffsetVsUTC(offset) {\n    let v = parseInt(offset, 10);\n\n    return v >= 4 && v<= 6 ? 100 : 0;\n}\n","import React from \"react\";\n\nexport function Check({title, passed}) {\n    const className = passed ? \"ok\" : \"not ok\";\n    return <code className={className}>{title}</code>\n}","import React from \"react\";\n\nexport function Observation({title, value}) {\n    \n    return <code>{title}: {value}</code>\n}","import React, {Component} from 'react';\nimport './App.css';\nimport {geCurrentPosition, getResult, isGeoAvailable, watchPosition} from \"./services/geo\";\nimport {\n    devToolsOpen,\n    getBrowserData,\n    getLanguage,\n    getTimezone,\n    getTimezoneOffsetVsUTC,\n    getVideoCardInfo,\n    isMobile\n} from \"./services/hardware\";\nimport {Check} from \"./Check\";\nimport {Observation} from \"./Observation\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            position: \"\",\n            error: \"\",\n            prevWatchPositions: [],\n            prevOnePositions: []\n        };\n        \n        this.handleWatchChanges = this.handleWatchChanges.bind(this);\n        this.handleWatchClick = this.handleWatchClick.bind(this);\n        this.handleOneClick = this.handleOneClick.bind(this);\n        this.handleOneChanges = this.handleOneChanges.bind(this);\n        this.downloadWatchCSV = this.downloadWatchCSV.bind(this);\n        this.downloadOneCSV = this.downloadOneCSV.bind(this);\n    }\n    \n    handleWatchChanges({position, error}) {\n        // this.setState({position: position, error: error});\n        if(!error){\n            let newEntry = {coords: {}, timestamp: position.timestamp};\n            for(let key in position.coords){\n                // if(position.coords.hasOwnProperty(key)){\n                    console.log(\"key: \", key, position.coords[key]);\n                    newEntry.coords[key] = position.coords[key];\n                // }\n            }\n            // {coords: position.coords, timestamp: position.timestamp}\n            this.setState({prevWatchPositions: [].concat([...this.state.prevWatchPositions], newEntry)});\n        }\n    }\n    handleOneChanges({position, error}) {\n        // this.setState({position: position, error: error});\n        if(!error){\n            let newEntry = {coords: {}, timestamp: position.timestamp};\n            for(let key in position.coords){\n                // if(position.coords.hasOwnProperty(key)){\n                    console.log(\"key: \", key, position.coords[key]);\n                    newEntry.coords[key] = position.coords[key];\n                // }\n            }\n            // {coords: position.coords, timestamp: position.timestamp}\n            this.setState({prevOnePositions: [].concat([...this.state.prevOnePositions], newEntry)});\n        }\n    }\n\n    \n    handleWatchClick() {\n        watchPosition(this.handleWatchChanges);\n    }\n    handleOneClick() {\n        geCurrentPosition(this.handleOneChanges);\n    }\n    \n    componentDidMount() {\n        window.addEventListener('orientationchange', this.doOnOrientationChange);\n        this.doOnOrientationChange();\n    }\n    \n    doOnOrientationChange() {\n        if (window.innerHeight > window.innerWidth) {\n            console.log(\"portrait\");\n        } else {\n            console.log(\"landscape\")\n        }\n    }\n    downloadOneCSV() {\n\n    }\n    downloadWatchCSV() {\n\n    }\n    \n    render() {\n        return (\n            <div className=\"App\">\n                <header>Geolocation</header>\n                <section className=\"side-container\">\n                    <div className={`head` + (getResult() < 50 ? \" sad\" : \"\")}>\n                        <div className=\"face\">\n                            <div className=\"mouth\" />\n                            <div className=\"eye-group\">\n                                <div className=\"eye eye-left\" />\n                                <div className=\"eye eye-right\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div>Confidence: {getResult()}</div>\n                    {/*<Observation title={\"Is Mobile\"} value={JSON.stringify(isMobile())}/>*/}\n                    \n                    {/*<Observation title={\"Dev Tools\"} value={devToolsOpen()}/>*/}\n                    {/*<Observation title={\"Browser data\"} value={getBrowserData()}/>*/}\n                    {/*<Observation title={\"GPU\"} value={JSON.stringify(getVideoCardInfo())}/>*/}\n\n                    <div className={\"details\"}>\n\n                        <Observation title={\"Language\"} value={JSON.stringify(getLanguage())}/>\n                        <Observation title={\"Timezone IANA\"} value={JSON.stringify(getTimezone())}/>\n\n                        <Observation title={\"Timezone Offset\"}\n                                     value={JSON.stringify(getTimezoneOffsetVsUTC()) + \"hr(s)\"}/>\n\n\n                        <Check title={\"Geolocation API Availability\"} passed={isGeoAvailable()}/>\n\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <h1> Watch Position</h1>\n                        <button onClick={this.handleWatchClick}>Start Watching Geolocation</button>\n                        <code>{this.state.error}</code>\n\n                        <ul className={\"entries\"}>\n                            <li key={\"w0\"}>\n                                <code className={\"index-column\"}>#</code>\n                                <code>latitude</code>\n                                <code>longitude</code>\n                                <code>accuracy</code>\n                                <code>altitude</code>\n                                <code>altitudeAccuracy</code>\n                                <code>heading</code>\n                                <code>speed</code>\n                                <code>timestamp</code>\n                                {/*<code>Date: {this.state.position && (new Date(this.state.position.timestamp).toISOString(\"DD-MM-YYYY HH:mm:ss\"))}</code>*/}\n                            </li>\n                                {this.state.prevWatchPositions.map((pos, index) => (\n                                    <li key={\"w\" + index}>\n                                        <code className={\"index-column\"}>{index}.</code>\n                                        <code>{pos.coords.latitude}</code>\n                                        <code>{pos.coords.longitude}</code>\n                                        <code>{pos.coords.accuracy}m</code>\n                                        <code>{pos.coords.altitude}</code>\n                                        <code>{pos.coords.altitudeAccuracy}</code>\n                                        <code>{pos.coords.heading}</code>\n                                        <code>{pos.coords.speed}</code>\n                                        <code>+{pos.timestamp - this.state.prevWatchPositions[0].timestamp } {(pos.timestamp + \"\").length === 10 ? \"sec\" : \"ms\"}</code>\n                                        {/*<code>Date: {this.state.position && (new Date(this.state.position.timestamp).toISOString(\"DD-MM-YYYY HH:mm:ss\"))}</code>*/}\n                                    </li>))\n                                }\n                        </ul>\n                        <a href=\"\" id=\"downloadwatchCSV\" onClick={this.downloadWatchCSV}>Download CSV</a>\n\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <h1> One time Position</h1>\n                        <button onClick={this.handleOneClick}>Get Quick Geolocation</button>\n                        <ul className={\"entries\"}>\n                            <li key=\"0\">\n                                <code className={\"index-column\"}>#</code>\n                                <code>latitude</code>\n                                <code>longitude</code>\n                                <code>accuracy</code>\n                                <code>altitude</code>\n                                <code>altitudeAccuracy</code>\n                                <code>heading</code>\n                                <code>speed</code>\n                                <code>timestamp</code>\n                                {/*<code>Date: {this.state.position && (new Date(this.state.position.timestamp).toISOString(\"DD-MM-YYYY HH:mm:ss\"))}</code>*/}\n                            </li>\n                            {this.state.prevOnePositions && this.state.prevOnePositions.map((pos, index) => (\n                                <li key={index}>\n                                    <code className={\"index-column\"}>{index}.</code>\n                                    <code>{pos.coords.latitude}</code>\n                                    <code>{pos.coords.longitude}</code>\n                                    <code>{pos.coords.accuracy}m</code>\n                                    <code>{pos.coords.altitude}</code>\n                                    <code>{pos.coords.altitudeAccuracy}</code>\n                                    <code>{pos.coords.heading}</code>\n                                    <code>{pos.coords.speed}</code>\n                                    <code>+{pos.timestamp - this.state.prevOnePositions[0].timestamp } {(pos.timestamp + \"\").length === 10 ? \"sec\" : \"ms\"}</code>\n                                    {/*<code>Date: {this.state.position && (new Date(this.state.position.timestamp).toISOString(\"DD-MM-YYYY HH:mm:ss\"))}</code>*/}\n                                </li>))\n                            }\n                        </ul>\n                        <a href=\"\" id=\"downloadoneCSV\" onClick={this.downloadOneCSV}>Download CSV</a>\n                    </div>\n                </section>\n                <footer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}