{"version":3,"sources":["services/hardware.js","services/fingerprint2.js","services/geo.js","Observation.js","TestingGround.js","services/geolocation.js","services/calculations.js","Home.js","serviceWorker.js","index.js","App.js"],"names":["getTimezoneOffsetVsUTC","Date","getTimezoneOffset","getTimezone","Intl","DateTimeFormat","resolvedOptions","timeZone","err","geoHandler","geoHandlerOne","getHasLiedLanguages","navigator","languages","substr","language","getHasLiedResolution","window","screen","width","availWidth","height","availHeight","getHasLiedOs","os","userAgent","toLowerCase","oscpu","platform","indexOf","maxTouchPoints","msMaxTouchPoints","plugins","getHasLiedBrowser","browser","productSub","errFirefox","tempRes","eval","toString","length","toSource","errOfErr","options","enableHighAccuracy","timeout","maximumAge","data","position","error","isGeoAvailable","successHandler","pos","console","log","crd","coords","concat","latitude","longitude","accuracy","errorHandler","reason","code","message","warn","successWatchHandler","getResultDeviceTrust","result","finger","tests","hasLiedIANATimezone","hasLiedTimeZoneOffset","parseInt","timezone","tz","String","offset","v","Observation","_ref","title","value","react_default","a","createElement","className","ObservationTest","_ref2","passed","JSON","stringify","exportToCSV","id","name","arrData","csvContent","heading","split","join","forEach","item","dataObject","dataArray","map","hr","push","timestamp","csvRow","encodedUri","encodeURI","link","document","setAttribute","body","appendChild","click","removeChild","TestingGround","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","errorOne","prevWatchPositions","prevOnePositions","handleWatchChanges","bind","assertThisInitialized","handleWatchClick","handleOneClick","handleOneChanges","downloadWatchCSV","downloadOneCSV","setState","newEntry","key","toConsumableArray","e","handler","geolocation","watchPosition","getCurrentPosition","addEventListener","doOnOrientationChange","innerHeight","innerWidth","event","stopPropagation","_this2","userLanguage","browserLanguage","onClick","index","altitude","altitudeAccuracy","speed","Component","getJitters","positions","testPositionsForJump","distances","calcDistance","bigJumps","validDistance","filter","distance","getInvalidDistances","n","m","unit","lat1","lat2","lon1","lon2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","Home","currentPositions","watchPositions","info","testFinished","infoWatch","infoFinal","handleCurrentPosition","handleWatchPosition","currentTimerId","watchTimerId","self","setInterval","Error","geCurrentPosition","setTimeout","clearInterval","runCurrentPositionTest","positionData","test","jitters","noJitterCount","j","halfSamplesCount","ceil","allSamplesCount","testCurrentPositions","objectSpread","startWatchTest","clearWatch","runWatchPositionTest","testWatchPositions","React","Boolean","location","hostname","match","ReactDOM","render","react_router_dom","basename","react_router","exact","path","component","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a3e7fdc.chunk.js","sourcesContent":["export function getBrowserData() {\n    navigator.sayswho= (function(){\n        var ua= navigator.userAgent, tem,\n            M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n        if(/trident/i.test(M[1])){\n            tem=  /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n            return 'IE '+(tem[1] || '');\n        }\n        if(M[1]=== 'Chrome'){\n            tem= ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\n            if(tem!= null) return tem.slice(1).join(' ').replace('OPR', 'Opera');\n        }\n        M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];\n        if((tem= ua.match(/version\\/(\\d+)/i))!= null) M.splice(1, 1, tem[1]);\n        return M.join(' ');\n    })();\n    \n    return navigator.sayswho;\n}\n\nexport function getVideoCardInfo() {\n    const gl = document.createElement('canvas').getContext('webgl');\n    if (!gl) {\n        return {\n            error: \"no webgl\",\n        };\n    }\n    const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');\n    return debugInfo ? {\n        vendor: gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL),\n        renderer:  gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL),\n    } : {\n        error: \"no WEBGL_debug_renderer_info\",\n    };\n}\n\nexport function getLanguage() {\n    return (navigator.languages && navigator.languages.length) ? navigator.languages[0] : navigator.userLanguage || navigator.language || navigator.browserLanguage || 'en';\n}\nexport function getLanguages() {\n    return navigator.languages;\n}\n\nexport function getTimezoneOffsetVsUTC() {\n    return (new Date().getTimezoneOffset())/60 ;\n}\nexport function getTimezone() {\n    try{\n        return Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } catch(err){\n        return \"\";\n    }\n\n}\n\nexport function isMobile() {\n    if (window.matchMedia(\"(orientation: portrait)\").matches) {\n        return window.matchMedia(\"only screen and (max-width: 760px)\").matches;\n    }\n}\n\nexport function devToolsOpen() {\n    // const minimalUserResponseInMiliseconds = 100;\n    // const before = new Date().getTime();\n    // debugger;\n    // const after = new Date().getTime();\n    // // user had to resume the script manually via opened dev tools\n    // return (after - before > minimalUserResponseInMiliseconds) ? \"on\" : \"off\";\n    \n    // var devtools = /./;\n    // devtools.toString = function() {\n    //     this.opened = true;\n    // }\n    //\n    // console.log('%c', devtools);\n}","export const getAdBlock = function () {\n    var ads = document.createElement('div')\n    ads.innerHTML = '&nbsp;'\n    ads.className = 'adsbox'\n    var result = false\n    try {\n        // body may not exist, that's why we need try/catch\n        document.body.appendChild(ads)\n        result = document.getElementsByClassName('adsbox')[0].offsetHeight === 0\n        document.body.removeChild(ads)\n    } catch (e) {\n        result = false\n    }\n    return result\n};\nexport const getHasLiedLanguages = function () {\n    // We check if navigator.language is equal to the first language of navigator.languages\n    if (typeof navigator.languages !== 'undefined') {\n        try {\n            var firstLanguages = navigator.languages[0].substr(0, 2)\n            if (firstLanguages !== navigator.language.substr(0, 2)) {\n                return true\n            }\n        } catch (err) {\n            return true\n        }\n    }\n    return false\n}\nexport const getHasLiedResolution = function () {\n    return window.screen.width < window.screen.availWidth || window.screen.height < window.screen.availHeight\n}\nexport const getHasLiedOs = function () {\n    var userAgent = navigator.userAgent.toLowerCase()\n    var oscpu = navigator.oscpu\n    var platform = navigator.platform.toLowerCase()\n    var os\n    // We extract the OS from the user agent (respect the order of the if else if statement)\n    if (userAgent.indexOf('windows phone') >= 0) {\n        os = 'Windows Phone'\n    } else if (userAgent.indexOf('win') >= 0) {\n        os = 'Windows'\n    } else if (userAgent.indexOf('android') >= 0) {\n        os = 'Android'\n    } else if (userAgent.indexOf('linux') >= 0) {\n        os = 'Linux'\n    } else if (userAgent.indexOf('iphone') >= 0 || userAgent.indexOf('ipad') >= 0) {\n        os = 'iOS'\n    } else if (userAgent.indexOf('mac') >= 0) {\n        os = 'Mac'\n    } else {\n        os = 'Other'\n    }\n    // We detect if the person uses a mobile device\n    var mobileDevice = (('ontouchstart' in window) ||\n        (navigator.maxTouchPoints > 0) ||\n        (navigator.msMaxTouchPoints > 0))\n\n    if (mobileDevice && os !== 'Windows Phone' && os !== 'Android' && os !== 'iOS' && os !== 'Other') {\n        return true\n    }\n\n    // We compare oscpu with the OS extracted from the UA\n    if (typeof oscpu !== 'undefined') {\n        oscpu = oscpu.toLowerCase()\n        if (oscpu.indexOf('win') >= 0 && os !== 'Windows' && os !== 'Windows Phone') {\n            return true\n        } else if (oscpu.indexOf('linux') >= 0 && os !== 'Linux' && os !== 'Android') {\n            return true\n        } else if (oscpu.indexOf('mac') >= 0 && os !== 'Mac' && os !== 'iOS') {\n            return true\n        } else if ((oscpu.indexOf('win') === -1 && oscpu.indexOf('linux') === -1 && oscpu.indexOf('mac') === -1) !== (os === 'Other')) {\n            return true\n        }\n    }\n\n    // We compare platform with the OS extracted from the UA\n    if (platform.indexOf('win') >= 0 && os !== 'Windows' && os !== 'Windows Phone') {\n        return true\n    } else if ((platform.indexOf('linux') >= 0 || platform.indexOf('android') >= 0 || platform.indexOf('pike') >= 0) && os !== 'Linux' && os !== 'Android') {\n        return true\n    } else if ((platform.indexOf('mac') >= 0 || platform.indexOf('ipad') >= 0 || platform.indexOf('ipod') >= 0 || platform.indexOf('iphone') >= 0) && os !== 'Mac' && os !== 'iOS') {\n        return true\n    } else if ((platform.indexOf('win') === -1 && platform.indexOf('linux') === -1 && platform.indexOf('mac') === -1) !== (os === 'Other')) {\n        return true\n    }\n\n    return typeof navigator.plugins === 'undefined' && os !== 'Windows' && os !== 'Windows Phone'\n}\nexport const getHasLiedBrowser = function () {\n    var userAgent = navigator.userAgent.toLowerCase()\n    var productSub = navigator.productSub\n\n    // we extract the browser from the user agent (respect the order of the tests)\n    var browser\n    if (userAgent.indexOf('firefox') >= 0) {\n        browser = 'Firefox'\n    } else if (userAgent.indexOf('opera') >= 0 || userAgent.indexOf('opr') >= 0) {\n        browser = 'Opera'\n    } else if (userAgent.indexOf('chrome') >= 0) {\n        browser = 'Chrome'\n    } else if (userAgent.indexOf('safari') >= 0) {\n        browser = 'Safari'\n    } else if (userAgent.indexOf('trident') >= 0) {\n        browser = 'Internet Explorer'\n    } else {\n        browser = 'Other'\n    }\n\n    if ((browser === 'Chrome' || browser === 'Safari' || browser === 'Opera') && productSub !== '20030107') {\n        return true\n    }\n\n    // eslint-disable-next-line no-eval\n    var tempRes = eval.toString().length\n    if (tempRes === 37 && browser !== 'Safari' && browser !== 'Firefox' && browser !== 'Other') {\n        return true\n    } else if (tempRes === 39 && browser !== 'Internet Explorer' && browser !== 'Other') {\n        return true\n    } else if (tempRes === 33 && browser !== 'Chrome' && browser !== 'Opera' && browser !== 'Other') {\n        return true\n    }\n\n    // We create an error to see how it is handled\n    var errFirefox\n    try {\n        // eslint-disable-next-line no-throw-literal\n        throw 'a'\n    } catch (err) {\n        try {\n            err.toSource()\n            errFirefox = true\n        } catch (errOfErr) {\n            errFirefox = false\n        }\n    }\n    return errFirefox && browser !== 'Firefox' && browser !== 'Other'\n}","import {getLanguage, getTimezone, getTimezoneOffsetVsUTC} from \"./hardware\";\nimport * as finger from \"./fingerprint2\";\n\nconst options = {\n    enableHighAccuracy: true,\n    timeout: 10000,\n    maximumAge: 0\n};\n\nlet geoHandler;\nlet geoHandlerOne;\nlet data = {\n    position: \"\",\n    error: \"\"\n};\n\nexport function isGeoAvailable() {\n    return \"geolocation\" in navigator;\n}\n\nexport function geCurrentPosition(handler) {\n    if (isGeoAvailable()) {\n        geoHandlerOne = handler;\n        navigator.geolocation.getCurrentPosition(successHandler, errorHandler, options);\n    }\n}\n\nfunction successHandler(pos) {\n    console.log(\"g1\");\n    var crd = pos.coords;\n\n    data.position = pos;\n    console.log(pos);\n    geoHandlerOne && geoHandlerOne({position: pos});\n\n    console.log('Your current position is:');\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n}\n\nfunction errorHandler(err) {\n    // error.code can be:\n    //   0: unknown error\n    //   1: permission denied\n    //   2: position unavailable (error response from location provider)\n    //   3: timed out\n    let reason = \"unknown error\";\n    if (err.code === 1) {\n        reason = \"permission denied\";\n    } else if (err.code === 2) {\n        reason = \"position unavailable (error response from location provider)\";\n    } else if (err.code === 3) {\n        reason = \"timed out\";\n    }\n    \n    data.error = `ERROR(${err.code}): reason: ${reason}, ${err.message}`;\n    \n    geoHandler && geoHandler({error: data.error});\n    geoHandlerOne && geoHandlerOne({error: data.error});\n    console.warn(data.error);\n}\n\n\nexport function watchPosition(handler) {\n    let id;\n    if (isGeoAvailable()) {\n        \n        geoHandler = handler;\n        id = navigator.geolocation.watchPosition(successWatchHandler, errorHandler, options);\n    }\n    return id;\n}\n\nfunction successWatchHandler(pos) {\n    var crd = pos.coords;\n    \n    data.position = pos;\n    console.log(pos);\n    geoHandler && geoHandler({position: pos});\n    \n    console.log('Watch: Your current position is:', new Date());\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n}\n\n\nexport function getResultDeviceTrust() {\n    let result = 0;\n    let tests = 0;\n\n    result += finger.getHasLiedOs() ? 0 : 100;\n    tests++;\n    result += finger.getHasLiedBrowser() ? 0 : 100;\n    tests++;\n    result += finger.getHasLiedLanguages() ? 0 : 100;\n    tests++;\n    result += finger.getHasLiedResolution() ? 0 : 100;\n    tests++;\n    result += hasLiedIANATimezone(getTimezone()) ? 0 : 100;\n    tests++;\n    result += hasLiedTimeZoneOffset(getTimezoneOffsetVsUTC()) ? 0 : 100;\n    tests++;\n    \n    // result += testLanguage(getLanguage());\n    // tests++;\n   \n\n    return parseInt(result/tests, 10);\n}\n\nexport function hasLiedIANATimezone(timezone) {\n    const tz = String(timezone).toLowerCase();\n    const tzs = [\"america/toronto\", \"america/montreal\"];\n    return tzs.indexOf(tz) === -1;\n}\n\nexport function hasLiedTimeZoneOffset(offset) {\n    console.log(offset);\n    let v = parseInt(offset, 10);\n\n    return !(v <= 6 && v >= 4);\n}\n\nexport function testLanguage(language) {\n    //\n    if(language === \"en-CA\" || language === \"fr-CA\" || language === \"en\") {\n        return 100;\n    }\n\n    return 0;\n}","import React from \"react\";\n\nexport function Observation({title, value}) {\n\n    return <div className=\"observation\">{title}: <span>{value}</span></div>\n}\n\nexport function ObservationTest({title, passed}) {\n\n    return (<div className={`observation observation-test ${passed ? \"\" : \"failed\"}`}>\n        {title}: <span className={`result`}>{JSON.stringify(passed)}</span>\n    </div>)\n}","import React, {Component} from 'react';\nimport './App.css';\nimport {\n    geCurrentPosition,\n    getResultDeviceTrust,\n    isGeoAvailable,\n    hasLiedIANATimezone,\n    watchPosition,\n    hasLiedTimeZoneOffset\n} from \"./services/geo\";\nimport {\n    devToolsOpen,\n    getBrowserData,\n    getLanguage, getLanguages,\n    getTimezone,\n    getTimezoneOffsetVsUTC,\n    getVideoCardInfo,\n    isMobile\n} from \"./services/hardware\";\nimport {Check} from \"./Check\";\nimport {Observation, ObservationTest} from \"./Observation\";\nimport * as finger from \"./services/fingerprint2\";\nimport {getHasLiedLanguages} from \"./services/fingerprint2\";\n\n\nconst csvRow = function(dataObject, heading) {\n    let dataArray = heading.map(hr => {\n        return dataObject.coords[hr] === null ? '' : dataObject.coords[hr].toString();\n    });\n    dataArray.push(dataObject.timestamp);\n    return dataArray.join(',') + '\\r\\n';\n};\n\nconst exportToCSV = function(id, name, arrData) {\n    \n    if (!arrData.length) {\n        return;\n    }\n    \n    let csvContent = \"data:text/csv;charset=utf-8,\";\n    \n    let heading = \"latitude,longitude,accuracy,altitude,altitudeAccuracy,heading,speed\".split(\",\");\n    // headers\n    csvContent += heading.join(\",\") +',timestamp'+ '\\r\\n';\n    \n    arrData.forEach(function(item){\n        csvContent += csvRow(item, heading);\n    });\n    \n    let encodedUri = encodeURI(csvContent);\n    let link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", \"customers.csv\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    link.click();\n    console.log(\"clicked\");\n};\n\nclass TestingGround extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            position: \"\",\n            error: \"\",\n            errorOne: \"\",\n            prevWatchPositions: [],\n            prevOnePositions: []\n        };\n        \n        this.handleWatchChanges = this.handleWatchChanges.bind(this);\n        this.handleWatchClick = this.handleWatchClick.bind(this);\n        this.handleOneClick = this.handleOneClick.bind(this);\n        this.handleOneChanges = this.handleOneChanges.bind(this);\n        this.downloadWatchCSV = this.downloadWatchCSV.bind(this);\n        this.downloadOneCSV = this.downloadOneCSV.bind(this);\n    }\n    \n    handleWatchChanges({position, error}) {\n        // this.setState({position: position, error: error});\n        if(!error){\n            let newEntry = {coords: {}, timestamp: position.timestamp};\n            for(let key in position.coords){\n                // if(position.coords.hasOwnProperty(key)){\n                console.log(\"key: \", key, position.coords[key]);\n                newEntry.coords[key] = position.coords[key];\n                // }\n            }\n            // {coords: position.coords, timestamp: position.timestamp}\n            this.setState({prevWatchPositions: [].concat([...this.state.prevWatchPositions], newEntry)});\n        } else {\n            this.setState({ error: error});\n        }\n    }\n    handleOneChanges({position, error}) {\n        // this.setState({position: position, error: error});\n        if(!error){\n            let newEntry = {coords: {}, timestamp: position.timestamp};\n            for(let key in position.coords){\n                // if(position.coords.hasOwnProperty(key)){\n                console.log(\"key: \", key, position.coords[key]);\n                newEntry.coords[key] = position.coords[key];\n                // }\n            }\n            // {coords: position.coords, timestamp: position.timestamp}\n            this.setState({prevOnePositions: [].concat([...this.state.prevOnePositions], newEntry)});\n        } else {\n            this.setState({ errorOne: error});\n        }\n    }\n    \n    \n    handleWatchClick(e) {\n        watchPosition(this.handleWatchChanges);\n    }\n    handleOneClick() {\n        geCurrentPosition(this.handleOneChanges);\n    }\n    \n    componentDidMount() {\n        window.addEventListener('orientationchange', this.doOnOrientationChange);\n        this.doOnOrientationChange();\n    }\n    \n    doOnOrientationChange() {\n        if (window.innerHeight > window.innerWidth) {\n            console.log(\"portrait\");\n        } else {\n            console.log(\"landscape\")\n        }\n    }\n    downloadOneCSV(event) {\n        event.stopPropagation();\n        exportToCSV(\"downloadoneCSV\", \"getCurrentPosition\", this.state.prevOnePositions);\n        return false;\n    }\n    downloadWatchCSV(event) {\n        event.stopPropagation();\n        exportToCSV(\"downloadwatchCSV\", \"watchPosition\", this.state.prevWatchPositions);\n        return false;\n    }\n    \n    render() {\n        return (\n            <div className=\"App\">\n                <header>Geolocation</header>\n                <section className=\"side-container\">\n                    \n                    <div className={`head` + (getResultDeviceTrust() < 50 ? \" sad\" : \"\")}>\n                        <div className=\"face\">\n                            <div className=\"mouth\" />\n                            <div className=\"eye-group\">\n                                <div className=\"eye eye-left\" />\n                                <div className=\"eye eye-right\" />\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div>Device Confidence: {getResultDeviceTrust()}</div>\n                    {/*<Observation title={\"Is Mobile\"} value={JSON.stringify(isMobile())}/>*/}\n                    \n                    {/*<Observation title={\"Dev Tools\"} value={devToolsOpen()}/>*/}\n                    {/*<Observation title={\"Browser data\"} value={getBrowserData()}/>*/}\n                    {/*<Observation title={\"GPU\"} value={JSON.stringify(getVideoCardInfo())}/>*/}\n                    \n                    <div className={\"details\"}>\n                        \n                        <ObservationTest title={\"OS ok\"} passed={!finger.getHasLiedOs()}/>\n                        <ObservationTest title={\"Browser ok\"} passed={!finger.getHasLiedBrowser()}/>\n                        \n                        <ObservationTest title={\"Languages ok\"} passed={!finger.getHasLiedLanguages()}/>\n                        <Observation title={\"Language\"} value={JSON.stringify(getLanguage())}/>\n                        <Observation title={\"Languages\"} value={JSON.stringify(getLanguages())}/>\n                        \n                        <ObservationTest title={\"Resolution ok\"} passed={!finger.getHasLiedResolution()}/>\n                        \n                        <ObservationTest\n                            title={`Timezone IANA`}\n                            passed={!hasLiedIANATimezone(getTimezone())}/>\n                        <Observation title={\"Timezone IANA\"}\n                                     value={JSON.stringify(getTimezone())}/>\n                        \n                        <ObservationTest\n                            title={`Timezone Offset`}\n                            passed={!hasLiedTimeZoneOffset(getTimezoneOffsetVsUTC())}/>\n                        <Observation title={\"Timezone Offset\"}\n                                     value={JSON.stringify(getTimezoneOffsetVsUTC()) + \"hr(s)\"}/>\n                        \n                        \n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                    </div>\n                    <div className={\"details\"}>\n                        <h1> Watch Position</h1>\n                        <button onClick={this.handleWatchClick}>Start Watching Geolocation</button>\n                        <code>{this.state.error}</code>\n                        \n                        <ul className={\"entries\"}>\n                            <li key={\"w0\"}>\n                                <code className={\"index-column\"}>#</code>\n                                <code>latitude</code>\n                                <code>longitude</code>\n                                <code>accuracy</code>\n                                <code>altitude</code>\n                                <code>altitudeAccuracy</code>\n                                <code>heading</code>\n                                <code>speed</code>\n                                <code>timestamp</code>\n                                {/*<code>Date: {this.state.position && (new Date(this.state.position.timestamp).toISOString(\"DD-MM-YYYY HH:mm:ss\"))}</code>*/}\n                            </li>\n                            {this.state.prevWatchPositions.map((pos, index) => (\n                                <li key={\"w\" + index}>\n                                    <code className={\"index-column\"}>{index}.</code>\n                                    <code>{pos.coords.latitude}</code>\n                                    <code>{pos.coords.longitude}</code>\n                                    <code>{pos.coords.accuracy}m</code>\n                                    <code>{pos.coords.altitude}</code>\n                                    <code>{pos.coords.altitudeAccuracy}</code>\n                                    <code>{pos.coords.heading}</code>\n                                    <code>{pos.coords.speed}</code>\n                                    <code>+{pos.timestamp - this.state.prevWatchPositions[0].timestamp } {(pos.timestamp + \"\").length === 10 ? \"sec\" : \"ms\"}</code>\n                                    {/*<code>Date: {this.state.position && (new Date(this.state.position.timestamp).toISOString(\"DD-MM-YYYY HH:mm:ss\"))}</code>*/}\n                                </li>))\n                            }\n                        </ul>\n                        <a id=\"downloadwatchCSV\" onClick={this.downloadWatchCSV}>Download CSV</a>\n                        \n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <h1> One time Position</h1>\n                        <button onClick={this.handleOneClick}>Get Quick Geolocation</button>\n                        <code>{this.state.error}</code>\n                        <ul className={\"entries\"}>\n                            <li key=\"0\">\n                                <code className={\"index-column\"}>#</code>\n                                <code>latitude</code>\n                                <code>longitude</code>\n                                <code>accuracy</code>\n                                <code>altitude</code>\n                                <code>altitudeAccuracy</code>\n                                <code>heading</code>\n                                <code>speed</code>\n                                <code>timestamp</code>\n                                {/*<code>Date: {this.state.position && (new Date(this.state.position.timestamp).toISOString(\"DD-MM-YYYY HH:mm:ss\"))}</code>*/}\n                            </li>\n                            {this.state.prevOnePositions && this.state.prevOnePositions.map((pos, index) => (\n                                <li key={index}>\n                                    <code className={\"index-column\"}>{index}.</code>\n                                    <code>{pos.coords.latitude}</code>\n                                    <code>{pos.coords.longitude}</code>\n                                    <code>{pos.coords.accuracy}m</code>\n                                    <code>{pos.coords.altitude}</code>\n                                    <code>{pos.coords.altitudeAccuracy}</code>\n                                    <code>{pos.coords.heading}</code>\n                                    <code>{pos.coords.speed}</code>\n                                    <code>+{pos.timestamp - this.state.prevOnePositions[0].timestamp } {(pos.timestamp + \"\").length === 10 ? \"sec\" : \"ms\"}</code>\n                                    {/*<code>Date: {this.state.position && (new Date(this.state.position.timestamp).toISOString(\"DD-MM-YYYY HH:mm:ss\"))}</code>*/}\n                                </li>))\n                            }\n                        </ul>\n                        <a id=\"downloadoneCSV\" onClick={this.downloadOneCSV}>Download CSV</a>\n                    </div>\n                </section>\n                <footer />\n            </div>\n        );\n    }\n}\n\nexport default TestingGround;\n","const options = {\n    enableHighAccuracy: true,\n    timeout: 60000,\n    maximumAge: 0\n};\nlet geoHandler;\nlet geoHandlerOne;\nlet data = {\n    position: \"\",\n    error: \"\"\n};\n\nexport function isGeoAvailable() {\n    return \"geolocation\" in navigator;\n}\n\n\nexport function geCurrentPosition(handler) {\n    if (isGeoAvailable()) {\n        geoHandlerOne = handler;\n        navigator.geolocation.getCurrentPosition(successHandler, errorHandler, options);\n    } else {\n        throw new Error(\"geolocation not available\");\n    }\n}\nfunction successHandler(pos) {\n    const crd = pos.coords;\n    \n    data.position = pos;\n    console.log(pos);\n    geoHandlerOne && geoHandlerOne({position: pos});\n    \n    console.log('Your current position is:');\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n}\n\nfunction errorHandler(err) {\n    // error.code can be:\n    //   0: unknown error\n    //   1: permission denied\n    //   2: position unavailable (error response from location provider)\n    //   3: timed out\n    let reason = \"unknown error\";\n    if (err.code === 1) {\n        reason = \"permission denied\";\n    } else if (err.code === 2) {\n        reason = \"position unavailable (error response from location provider)\";\n    } else if (err.code === 3) {\n        reason = \"timed out\";\n    }\n    \n    data.error = `ERROR(${err.code}): reason: ${reason}, ${err.message}`;\n    \n    geoHandler && geoHandler({error: data.error});\n    geoHandlerOne && geoHandlerOne({error: data.error});\n    console.warn(data.error);\n}\n\nexport function watchPosition(handler) {\n    let id;\n    if (isGeoAvailable()) {\n        \n        geoHandler = handler;\n        id = navigator.geolocation.watchPosition(successWatchHandler, errorHandler, options);\n    }\n    return id;\n}\n\nfunction successWatchHandler(pos) {\n    var crd = pos.coords;\n    \n    data.position = pos;\n    console.log(pos);\n    geoHandler && geoHandler({position: pos});\n    \n    console.log('Watch: Your current position is:', new Date());\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n}","function getJitters(positions) {\n    return positions.map((position, index) => {\n        if (index !== 0) {\n            return positions[index].timestamp - positions[index - 1].timestamp;\n        }\n        return 0;\n    });\n}\n\nexport function testCurrentPositions(positions) {\n    let test = {\n        message: \"Current position test - Failed\",\n        passed: false,\n        testFinished: true\n    };\n    \n    console.log(positions.length);\n    \n    if(positions.length > 0){\n    \n        const bigJumps = testPositionsForJump(positions);\n        \n        if(bigJumps > 0) {\n            return {\n                message: `Current position - Failed (${bigJumps} big jumps detected)`,\n                passed: false,\n                testFinished: true\n            }\n        }\n        \n        const jitters = getJitters(positions);\n        \n        console.log(\"jitters\", jitters);\n        const noJitterCount = jitters.filter((j) => j === 0).length;\n        const halfSamplesCount = Math.ceil(jitters.length/2);\n        const allSamplesCount = jitters.length;\n        \n        if(noJitterCount === allSamplesCount) {\n            test.message = `Current position - Failed (no jitter in ${allSamplesCount} samples)`;\n            test.passed = false;\n        } else if(noJitterCount >= halfSamplesCount) {\n            test.message = `Current position - Failed (no jitter in ${noJitterCount}/${allSamplesCount} samples)`;\n            test.passed = false;\n        } else {\n            test.message = `Current position - Passed (${allSamplesCount} samples)`;\n            test.passed = true;\n        }\n        \n    } else {\n        test.message = `Current position test - Failed (no geo data)`;\n        test.passed = false;\n    }\n    \n    return test;\n}\n\nexport function testWatchPositions(positions) {\n    \n    let test = {\n        message: \"Watch position test - Failed\",\n        passed: false,\n        testFinished: true\n    };\n    \n    if(positions.length > 0){\n    \n        const bigJumps = testPositionsForJump(positions);\n    \n        if(bigJumps > 0) {\n            return {\n                message: `Watch position - Failed (${bigJumps} big jumps detected)`,\n                passed: false,\n                testFinished: true\n            }\n        }\n    \n        const jitters = getJitters(positions);\n        \n        console.log(\"jitters\", jitters);\n        const jittersCount = jitters.filter((j) => j === 0).length;\n        if(jittersCount === positions.length) {\n            test.message = `Watch position test - Failed (no jitter in ${positions.length} samples)`;\n        } else {\n            test.message = `Watch position test - Passed (${positions.length} samples)`;\n            test.passed = true;\n        }\n        \n    } else {\n        test.message = \"Watch position test - Failed (no geo data)\";\n    }\n    \n    return test;\n}\n\n\nexport function testPositionsForJump(positions) {\n    try {\n        if(positions.length > 0){\n            const distances = positions.map((position, index, positions) => {\n                if(index !== 0){\n                    return calcDistance(positions[index - 1], position, \"K\");\n                }\n                return 0;\n            });\n        \n            console.log(\"distances\", distances);\n            const bigJumps = getInvalidDistances(distances, 10);\n            console.log(\"bigJumps\", bigJumps);\n            return bigJumps.length;\n        }\n    } catch (e) {\n        return 0;\n    }\n    \n    return 0;\n}\n\nfunction calcDistance(n, m, unit) {\n    const lat1 = m.coords.latitude;\n    const lat2 = n.coords.latitude;\n    const lon1 = m.coords.longitude;\n    const lon2 = n.coords.longitude;\n    \n    if ((lat1 === lat2) && (lon1 === lon2)) {\n        return 0;\n    } else {\n        const radlat1 = Math.PI * lat1/180;\n        const radlat2 = Math.PI * lat2/180;\n        const theta = lon1-lon2;\n        const radtheta = Math.PI * theta/180;\n        let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n        if (dist > 1) {\n            dist = 1;\n        }\n        dist = Math.acos(dist);\n        dist = dist * 180/Math.PI;\n        dist = dist * 60 * 1.1515;\n        if (unit===\"K\") { dist = dist * 1.609344 }\n        if (unit===\"N\") { dist = dist * 0.8684 }\n        return dist;\n    }\n}\n\n// function distance(lon1, lat1, lon2, lat2) {\n//\n//     function toRad(val) {\n//         return val * Math.PI / 180;\n//     }\n//     console.log(lon1, lat1, lon2, lat2);\n//\n//     const R = 6371; // Radius of the earth in km\n//     const dLat = toRad(lat2-lat1);  // Javascript functions in radians\n//     const dLon = toRad(lon2-lon1);\n//     const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n//         Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\n//         Math.sin(dLon/2) * Math.sin(dLon/2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n//     return R * c; // Distance in km\n// }\n\nfunction getUniqueValues(coordinates, property) {\n    return [...new Set( coordinates.map(n => n[property]))];\n}\n\nfunction checkLocationTimePeriod(coordinates) {\n    return 0;\n}\n\nfunction calculateDistances(coordinates) {\n    let i;\n    let distances = [];\n    for (i=1; i < coordinates.length-1; i++) {\n        distances.push(calcDistance(coordinates[i-1], coordinates[i], 'K'));\n    }\n    return distances;\n}\n\n// assumes valid periods of time\nfunction getInvalidDistances(distances, validDistance) {\n    return distances.filter((distance) => distance > validDistance);\n}\n\n","import React from 'react';\nimport {isGeoAvailable, geCurrentPosition, watchPosition} from \"./services/geolocation\";\nimport {testCurrentPositions, testWatchPositions} from \"./services/calculations\";\n\nconst FINAL_FAIL_MESSAGE = \"Hmm... not enough\";\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            currentPositions: [],\n            watchPositions: [],\n            position: {\n                coords: {},\n                timestamp: 0\n            },\n            error: \"\",\n            info: {\n                message:\"\",\n                testFinished: false,\n                passed: false\n            },\n            infoWatch: {\n                message:\"\",\n                testFinished: false,\n                passed: false\n            },\n            infoFinal: {\n                message:\"\",\n                testFinished: false,\n                passed: false\n            }\n        };\n        \n        this.handleCurrentPosition = this.handleCurrentPosition.bind(this);\n        this.handleWatchPosition = this.handleWatchPosition.bind(this);\n\n        this.currentTimerId = 0;\n        this.watchTimerId = 0;\n    }\n\n    componentDidMount() {\n        const self = this;\n        this.setState({\n            info: {\n                message:\"Running current position test....please wait\"\n            }\n        });\n\n        this.currentTimerId = setInterval(() => {\n            geCurrentPosition(this.handleCurrentPosition);\n        }, 1200);\n\n        setTimeout(() => {\n            clearInterval(self.currentTimerId);\n            self.runCurrentPositionTest();\n        }, 1200 * 10);\n    }\n    \n    handleCurrentPosition({position, error}) {\n        const self = this;\n        if (position) {\n            const positionData = {\n                    coords: {\n                        latitude: position.coords.latitude,\n                        longitude: position.coords.longitude,\n                        accuracy: position.coords.accuracy,\n                        altitude: position.coords.altitude,\n                        altitudeAccuracy: position.coords.altitudeAccuracy,\n                        heading: position.coords.heading,\n                        speed: position.coords.speed,\n                    },\n                    timestamp: position.timestamp\n                };\n            self.setState({position: positionData});\n            self.setState({currentPositions: [...self.state.currentPositions, positionData]});\n        }\n        \n        if (error) {\n            self.setState({error: error});\n        }\n    }\n    \n    runCurrentPositionTest() {\n        const info = testCurrentPositions(this.state.currentPositions);\n        this.setState({info: {...info}});\n        if(info.passed){\n            this.startWatchTest();\n        } else {\n            this.setState({infoFinal: {message:FINAL_FAIL_MESSAGE, passed: false, testFinished: true}});\n        }\n    }\n    \n    startWatchTest() {\n        if(isGeoAvailable()){\n            const self = this;\n            this.setState({\n                infoWatch: {\n                    message: \"Running watch position test....please wait\"\n                }\n            });\n\n            self.watchTimerId = watchPosition(this.handleWatchPosition);\n    \n            setTimeout(() => {\n                window.navigator.geolocation.clearWatch(self.watchTimerId);\n                self.runWatchPositionTest();\n            }, 1000 * 45);\n        }\n    }\n\n    handleWatchPosition({position, error}) {\n        const self = this;\n        if (position) {\n            const positionData = {\n                coords: {\n                    latitude: position.coords.latitude,\n                    longitude: position.coords.longitude,\n                    accuracy: position.coords.accuracy,\n                    altitude: position.coords.altitude,\n                    altitudeAccuracy: position.coords.altitudeAccuracy,\n                    heading: position.coords.heading,\n                    speed: position.coords.speed,\n                },\n                timestamp: position.timestamp\n            };\n            self.setState({position: positionData});\n            self.setState({watchPositions: [...self.state.watchPositions, positionData]});\n        }\n\n        if (error) {\n            self.setState({error: error});\n        }\n    }\n    \n    runWatchPositionTest() {\n        const infoWatch = testWatchPositions(this.state.watchPositions);\n        this.setState({infoWatch: {...infoWatch}});\n        if(infoWatch.passed){\n            this.setState({infoFinal: {message:\"All good ... you may pass\", passed: true, testFinished: true}});\n        } else {\n            this.setState({infoFinal: {message: FINAL_FAIL_MESSAGE, passed: false, testFinished: true}});\n        }\n    }\n    \n    render() {\n        const position = this.state.position;\n        const error = this.state.error;\n        return (\n            <div className=\"container\">\n                <div className=\"wrapper\">\n                <div className=\"sections\">\n                    <section className={\"section\"}>\n                        <p className={`test ${this.state.info.testFinished ? this.state.info.passed ? \"ok\": \"not-ok\" : \"\"}`}>{this.state.info.message}</p>\n                        <p className={`test ${this.state.infoWatch.testFinished ? this.state.infoWatch.passed ? \"ok\": \"not-ok\" : \"\"}`}>{this.state.infoWatch.message}</p>\n                        <p className={`test ${this.state.infoFinal.testFinished ? this.state.infoFinal.passed ? \"ok\": \"not-ok\" : \"\"}`}>{this.state.infoFinal.message}</p>\n                    </section>\n                    <section className={\"section\"}>\n                        <div className=\"position-details\">\n                            <h2>Position</h2>\n                            <ul>\n                                <li>\n                                    <div>Latitude</div>\n                                    <div>{position.coords.latitude}</div>\n                                </li>\n                                <li>\n                                    <div>Longitude</div>\n                                    <div>{position.coords.longitude}</div>\n                                </li>\n                                <li>\n                                    <div>Accuracy</div>\n                                    <div>{position.coords.accuracy} m</div>\n                                </li>\n                                <li>\n                                    <div>Altitude</div>\n                                    <div>{position.coords.altitude}</div>\n                                </li>\n                                <li>\n                                    <div>Altitude Accuracy</div>\n                                    <div>{position.coords.altitudeAccuracy}</div>\n                                </li>\n                                <li>\n                                    <div>Latitude</div>\n                                    <div>{position.coords.heading}</div>\n                                </li>\n                                <li>\n                                    <div>Speed</div>\n                                    <div>{position.coords.speed}</div>\n                                </li>\n                            </ul>\n                            <br />\n                            <div className={error ? \"text-error\" : \"\"}>{error ? \"Error: \" + error : \"\"}</div>\n                        </div>\n                    </section>\n                \n                \n                </div>\n                </div>\n            </div>\n        )\n    }\n\n    componentWillUnmount() {\n        if(isGeoAvailable() && this.watchTimerId){\n            navigator.geolocation.clearWatch(this.watchTimerId);\n        }\n        if(this.currentTimerId){\n            clearInterval(this.currentTimerId);\n        }\n    }\n\n}\n\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport TestingGround from \"./TestingGround\";\nimport { BrowserRouter as Router, Route,Switch } from \"react-router-dom\";\nimport Home from \"./Home\";\n\nexport default function App() {\n    return (\n        <Router basename=\"/geotesting\">\n            <header><h2>Geo Testing</h2></header>\n            <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/test\" component={TestingGround} />\n            </Switch>\n        </Router>\n    );\n}"],"sourceRoot":""}