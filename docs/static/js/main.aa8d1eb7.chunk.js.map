{"version":3,"sources":["services/geo.js","services/hardware.js","Check.js","Observation.js","App.js","serviceWorker.js","index.js"],"names":["geoHandler","options","enableHighAccuracy","timeout","maximumAge","data","position","error","isGeoAvailable","navigator","errorHandler","err","reason","code","concat","message","console","warn","successWatchHandler","pos","crd","coords","log","Date","latitude","longitude","accuracy","getVideoCardInfo","gl","document","createElement","getContext","debugInfo","getExtension","vendor","getParameter","UNMASKED_VENDOR_WEBGL","renderer","UNMASKED_RENDERER_WEBGL","isMobile","window","matchMedia","matches","Check","_ref","title","className","passed","react_default","a","Observation","value","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","prevPosition","handleChanges","bind","assertThisInitialized","handleClick","setState","toConsumableArray","timestamp","handler","id","geolocation","watchPosition","addEventListener","doOnOrientationChange","innerHeight","innerWidth","JSON","stringify","devToolsOpen","sayswho","tem","ua","userAgent","M","match","test","exec","slice","join","replace","appName","appVersion","splice","languages","length","userLanguage","language","browserLanguage","Intl","DateTimeFormat","resolvedOptions","timeZone","getTimezoneOffset","onClick","altitude","altitudeAccuracy","heading","speed","toISOString","Component","Boolean","location","hostname","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa8d1eb7.chunk.js","sourcesContent":["const options = {\n    enableHighAccuracy: true,\n    timeout: 10000,\n    maximumAge: 0\n};\n\nlet geoHandler;\nlet data = {\n    position: \"\",\n    error: \"\"\n};\n\nexport function isGeoAvailable() {\n    return \"geolocation\" in navigator;\n}\n\nexport function geCurrentPosition() {\n    if (isGeoAvailable()) {\n        navigator.geolocation.getCurrentPosition(successHandler, errorHandler, options);\n    }\n}\n\nfunction successHandler(pos) {\n    console.log(\"g1\");\n    var crd = pos.coords;\n    \n    data.position = pos;\n    geoHandler && geoHandler({position: data.position});\n    console.log('Your current position is:');\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n}\n\nfunction errorHandler(err) {\n    // error.code can be:\n    //   0: unknown error\n    //   1: permission denied\n    //   2: position unavailable (error response from location provider)\n    //   3: timed out\n    let reason = \"unknown error\";\n    if (err.code === 1) {\n        reason = \"permission denied\";\n    } else if (err.code === 2) {\n        reason = \"position unavailable (error response from location provider)\";\n    } else if (err.code === 3) {\n        reason = \"timed out\";\n    }\n    \n    data.error = `ERROR(${err.code}): reason: ${reason}, ${err.message}`;\n    \n    geoHandler && geoHandler({error: data.error});\n    console.warn(data.error);\n}\n\n\nexport function watchPosition(handler) {\n    let id;\n    if (isGeoAvailable()) {\n        \n        geoHandler = handler;\n        id = navigator.geolocation.watchPosition(successWatchHandler, errorHandler, options);\n    }\n    return id;\n}\n\nfunction successWatchHandler(pos) {\n    var crd = pos.coords;\n    \n    data.position = pos;\n    console.log(pos);\n    geoHandler && geoHandler({position: pos});\n    \n    console.log('Watch: Your current position is:', new Date());\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n}\n","export function getBrowserData() {\n    navigator.sayswho= (function(){\n        var ua= navigator.userAgent, tem,\n            M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n        if(/trident/i.test(M[1])){\n            tem=  /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n            return 'IE '+(tem[1] || '');\n        }\n        if(M[1]=== 'Chrome'){\n            tem= ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\n            if(tem!= null) return tem.slice(1).join(' ').replace('OPR', 'Opera');\n        }\n        M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];\n        if((tem= ua.match(/version\\/(\\d+)/i))!= null) M.splice(1, 1, tem[1]);\n        return M.join(' ');\n    })();\n    \n    return navigator.sayswho;\n}\n\nexport function getVideoCardInfo() {\n    const gl = document.createElement('canvas').getContext('webgl');\n    if (!gl) {\n        return {\n            error: \"no webgl\",\n        };\n    }\n    const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');\n    return debugInfo ? {\n        vendor: gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL),\n        renderer:  gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL),\n    } : {\n        error: \"no WEBGL_debug_renderer_info\",\n    };\n}\n\nexport function getLanguage() {\n    return (navigator.languages && navigator.languages.length) ? navigator.languages[0] : navigator.userLanguage || navigator.language || navigator.browserLanguage || 'en';\n}\n\nexport function getTimezoneOffset() {\n    return new Date().getTimezoneOffset();\n}\nexport function getTimezone() {\n    return Intl.DateTimeFormat().resolvedOptions().timeZone;\n}\n\nexport function isMobile() {\n    if (window.matchMedia(\"(orientation: portrait)\").matches) {\n        return window.matchMedia(\"only screen and (max-width: 760px)\").matches;\n    }\n}\n\nexport function devToolsOpen() {\n    // const minimalUserResponseInMiliseconds = 100;\n    // const before = new Date().getTime();\n    // debugger;\n    // const after = new Date().getTime();\n    // // user had to resume the script manually via opened dev tools\n    // return (after - before > minimalUserResponseInMiliseconds) ? \"on\" : \"off\";\n    \n    // var devtools = /./;\n    // devtools.toString = function() {\n    //     this.opened = true;\n    // }\n    //\n    // console.log('%c', devtools);\n}","import React from \"react\";\n\nexport function Check({title, passed}) {\n    const className = passed ? \"ok\" : \"not ok\";\n    return <code className={className}>{title}</code>\n}","import React from \"react\";\n\nexport function Observation({title, value}) {\n    \n    return <code>{title}: {value}</code>\n}","import React, {Component} from 'react';\nimport './App.css';\nimport {isGeoAvailable, watchPosition} from \"./services/geo\";\nimport {\n    devToolsOpen,\n    getBrowserData,\n    getLanguage,\n    getTimezone,\n    getTimezoneOffset,\n    getVideoCardInfo,\n    isMobile\n} from \"./services/hardware\";\nimport {Check} from \"./Check\";\nimport {Observation} from \"./Observation\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            position: \"\",\n            error: \"\",\n            prevPosition: []\n        };\n        \n        this.handleChanges = this.handleChanges.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    \n    handleChanges({position, error}) {\n        this.setState({position: position, error: error});\n        if(!error){\n            this.setState({prevPosition: [].concat([...this.state.prevPosition], {coords: position.coords, timestamp: position.timestamp})});\n        }\n    }\n\n    \n    handleClick() {\n        watchPosition(this.handleChanges);\n    }\n    \n    componentDidMount() {\n        window.addEventListener('orientationchange', this.doOnOrientationChange);\n        this.doOnOrientationChange();\n    }\n    \n    doOnOrientationChange() {\n        // switch(window.orientation) {\n        //     case -90 || 90:\n        //         alert('landscape');\n        //         break;\n        //     default:\n        //         alert('portrait');\n        //         break;\n        // }\n        if (window.innerHeight > window.innerWidth) {\n            console.log(\"portrait\");\n        } else {\n            console.log(\"landscape\")\n        }\n    }\n    \n    render() {\n        return (\n            <div className=\"App\">\n                <header>Geolocation</header>\n                <section className=\"side-container\">\n                    <Observation title={\"Is Mobile\"} value={JSON.stringify(isMobile())}/>\n                    \n                    <Observation title={\"Dev Tools\"} value={devToolsOpen()}/>\n                    <Observation title={\"Browser data\"} value={getBrowserData()}/>\n                    <Observation title={\"GPU\"} value={JSON.stringify(getVideoCardInfo())}/>\n                    \n                    <Observation title={\"Language\"} value={JSON.stringify(getLanguage())}/>\n                    <Observation title={\"Timezone IANA\"} value={JSON.stringify(getTimezone())}/>\n                    \n                    <Observation title={\"Timezone Offset\"} value={JSON.stringify(getTimezoneOffset())}/>\n                    \n                    \n                    <Check title={\"Geolocation API Availability\"} passed={isGeoAvailable()}/>\n                    <button onClick={this.handleClick}>Start Watching Geolocation</button>\n                    \n                    <code>{this.state.error}</code>\n                    <code>latitude: {this.state.position && this.state.position.coords.latitude}</code>\n                    <code>longitude: {this.state.position && this.state.position.coords.longitude}</code>\n                    <code>accuracy: within {this.state.position && this.state.position.coords.accuracy}m</code>\n                    <code>altitude: {this.state.position && this.state.position.coords.altitude}</code>\n                    <code>altitudeAccuracy: {this.state.position && this.state.position.coords.altitudeAccuracy}</code>\n                    <code>heading: {this.state.position && this.state.position.coords.heading}</code>\n                    <code>speed: {this.state.position && this.state.position.coords.speed}</code>\n                    <code>timestamp: {this.state.position && this.state.position.timestamp}</code>\n                    <code>Date: {this.state.position && (new Date(this.state.position.timestamp).toISOString(\"DD-MM-YYYY HH:mm:ss\"))}</code>\n                \n                </section>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}